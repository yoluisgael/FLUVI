/**
 * RainEffect.js - Sistema de efecto de lluvia eficiente para PixiJS
 *
 * Sistema optimizado de part√≠culas de lluvia que no afecta el rendimiento
 */

console.log('üåßÔ∏è RainEffect.js cargando...');

class RainEffect {
    constructor(app) {
        this.app = app;
        this.container = null;
        this.particles = [];
        this.isActive = false;
        this.maxParticles = 150; // N√∫mero reducido para mejor rendimiento
        this.particlePool = []; // Pool de part√≠culas reutilizables

        // Sistema de rel√°mpagos
        this.lightningOverlay = null;
        this.lightningTimer = 0;
        this.lightningInterval = 300 + Math.random() * 400; // 5-13 segundos entre rel√°mpagos
        this.isLightningFlashing = false;
        this.lightningFlashDuration = 0;

        console.log('üåßÔ∏è RainEffect inicializado');
    }

    /**
     * Inicializa el contenedor de lluvia
     */
    initialize() {
        if (this.container) return; // Ya inicializado

        // Crear contenedor para las gotas de lluvia
        this.container = new PIXI.Container();
        this.container.name = 'rainEffect';
        this.container.zIndex = 35; // Entre UI (30) y Debug (40)

        // Crear overlay de rel√°mpagos (muy sutil)
        this.lightningOverlay = new PIXI.Graphics();
        this.lightningOverlay.zIndex = 36; // Encima de la lluvia
        this.lightningOverlay.alpha = 0; // Invisible por defecto

        // Agregar al stage
        this.app.stage.addChild(this.container);
        this.app.stage.addChild(this.lightningOverlay);

        console.log('üåßÔ∏è Contenedor de lluvia y rel√°mpagos creado');
    }

    /**
     * Crea una part√≠cula de lluvia eficiente
     */
    createRainParticle() {
        // Reutilizar part√≠cula del pool si existe
        if (this.particlePool.length > 0) {
            return this.particlePool.pop();
        }

        // Crear nueva part√≠cula usando Graphics (m√°s eficiente que Sprite)
        const particle = new PIXI.Graphics();

        // Dibujar una l√≠nea gruesa para la gota de lluvia (azul fuerte para visibilidad de d√≠a)
        particle.lineStyle(2, 0x0066FF, 0.8); // Azul fuerte (#0066FF) con buena opacidad
        particle.moveTo(0, 0);
        particle.lineTo(0, 10); // L√≠nea de 10 pixels (un poco m√°s larga)

        return particle;
    }

    /**
     * Resetea una part√≠cula a una nueva posici√≥n
     */
    resetParticle(particle) {
        const screenWidth = this.app.screen.width;
        const screenHeight = this.app.screen.height;

        particle.x = Math.random() * screenWidth;
        particle.y = Math.random() * -100; // Empezar arriba de la pantalla
        particle.speedY = 10 + Math.random() * 5; // Velocidad m√°s r√°pida (10-15)
        particle.speedX = -1 + Math.random() * 2; // Ligera desviaci√≥n horizontal
        particle.alpha = 0.6 + Math.random() * 0.3; // Mayor opacidad para mejor visibilidad
    }

    /**
     * Dispara un rel√°mpago sutil
     */
    triggerLightning() {
        if (!this.lightningOverlay || this.isLightningFlashing) return;

        this.isLightningFlashing = true;
        this.lightningFlashDuration = 0;

        // Dibujar overlay blanco muy sutil que cubre toda la pantalla
        this.lightningOverlay.clear();
        this.lightningOverlay.beginFill(0xFFFFFF, 1); // Blanco puro
        this.lightningOverlay.drawRect(0, 0, this.app.screen.width, this.app.screen.height);
        this.lightningOverlay.endFill();
    }

    /**
     * Activa el efecto de lluvia
     */
    start() {
        if (this.isActive) return;

        this.initialize();
        this.isActive = true;

        // Crear part√≠culas iniciales
        for (let i = 0; i < this.maxParticles; i++) {
            const particle = this.createRainParticle();
            this.resetParticle(particle);

            // Distribuir verticalmente para inicio suave
            particle.y = Math.random() * this.app.screen.height;

            this.particles.push(particle);
            this.container.addChild(particle);
        }

        // Iniciar animaci√≥n
        this.app.ticker.add(this.update, this);

        console.log('üåßÔ∏è Lluvia activada');
    }

    /**
     * Desactiva el efecto de lluvia
     */
    stop() {
        if (!this.isActive) return;

        this.isActive = false;

        // Detener animaci√≥n
        this.app.ticker.remove(this.update, this);

        // Devolver part√≠culas al pool
        this.particles.forEach(particle => {
            this.container.removeChild(particle);
            this.particlePool.push(particle);
        });

        this.particles = [];

        console.log('üåßÔ∏è Lluvia desactivada');
    }

    /**
     * Actualiza las part√≠culas cada frame (m√©todo super eficiente)
     */
    update(delta) {
        if (!this.isActive) return;

        const screenHeight = this.app.screen.height;

        // Actualizar cada part√≠cula
        for (let i = 0; i < this.particles.length; i++) {
            const particle = this.particles[i];

            // Mover part√≠cula
            particle.y += particle.speedY * delta;
            particle.x += particle.speedX * delta;

            // Si sale de la pantalla, resetear
            if (particle.y > screenHeight + 10) {
                this.resetParticle(particle);
            }
        }

        // Sistema de rel√°mpagos
        if (this.isLightningFlashing) {
            // Flash muy r√°pido (fade out exponencial)
            this.lightningFlashDuration += delta;

            if (this.lightningFlashDuration < 3) {
                // Flash inicial muy brillante pero corto (0.05 segundos)
                this.lightningOverlay.alpha = 0.15 * (1 - this.lightningFlashDuration / 3);
            } else if (this.lightningFlashDuration < 8) {
                // Segundo flash m√°s tenue (parpadeo)
                this.lightningOverlay.alpha = 0.08 * (1 - (this.lightningFlashDuration - 3) / 5);
            } else {
                // Terminar flash
                this.lightningOverlay.alpha = 0;
                this.isLightningFlashing = false;
                // Resetear timer para pr√≥ximo rel√°mpago
                this.lightningInterval = 300 + Math.random() * 400; // 5-13 segundos
                this.lightningTimer = 0;
            }
        } else {
            // Contar tiempo hasta pr√≥ximo rel√°mpago
            this.lightningTimer += delta;
            if (this.lightningTimer >= this.lightningInterval) {
                this.triggerLightning();
            }
        }
    }

    /**
     * Limpia completamente el efecto
     */
    destroy() {
        this.stop();

        if (this.container) {
            // Destruir todas las part√≠culas
            this.particlePool.forEach(p => p.destroy());
            this.particles.forEach(p => p.destroy());

            this.container.destroy({ children: true });
            this.container = null;
        }

        if (this.lightningOverlay) {
            this.lightningOverlay.destroy();
            this.lightningOverlay = null;
        }

        this.particlePool = [];
        this.particles = [];

        console.log('üåßÔ∏è RainEffect destruido');
    }
}

// Exponer globalmente
window.RainEffect = RainEffect;

console.log('‚úÖ RainEffect.js cargado');
